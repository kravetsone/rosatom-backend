generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:bestsecure@localhost:5432/root?schema=public"
}

model User {
  id Int @id @default(autoincrement())

  login    String @unique
  password String

  firstName String
  lastName  String

  role UserRole @default(USER)
}

enum UserRole {
  USER
  ADMIN
}

// Сущности датасета

model IceBreaker {
  imo  Int    @id
  name String @unique

  metadata IceBreakerMetadata?

  schedules Schedule[]
}

model IceBreakerMetadata {
  shipType         String
  flagCountryCode  String @default("ru")
  dateOfBuild      String
  grossTonnage     Float
  summerDeadweight Int
  lengthOverall    Int
  beam             Int

  registeredOwner    IceBreakerOwner? @relation(fields: [registeredOwnerImo], references: [imo])
  registeredOwnerImo Int?

  iceBreaker    IceBreaker @relation(fields: [iceBreakerImo], references: [imo])
  iceBreakerImo Int        @unique
}

model IceBreakerOwner {
  name               String
  countryCode        String               @map("counryCode")
  imo                Int                  @id
  IceBreakerMetadata IceBreakerMetadata[]
}

model Tanker {
  imo      Int      @id
  name     String
  iceClass IceClass
  speed    Int

  metadata      TankerMetadata?
  tankerRequest TankerRequest[]
  schedules     Schedule[]
}

model TankerMetadata {
  shipType         String
  flagCountryCode  String @default("ru")
  dateOfBuild      String
  grossTonnage     Float
  summerDeadweight Int
  lengthOverall    Int
  beam             Int

  registeredOwner    TankerOwner? @relation(fields: [registeredOwnerImo], references: [imo])
  registeredOwnerImo Int?

  tanker    Tanker @relation(fields: [tankerImo], references: [imo])
  tankerImo Int    @unique
}

model TankerOwner {
  name        String
  countryCode String @map("counryCode")
  imo         Int    @id

  TankerMetadata TankerMetadata[]
}

model TankerRequest {
  id         Int    @id @default(autoincrement())
  tanker     Tanker @relation(fields: [tankerId], references: [imo], onDelete: Cascade)
  tankerId   Int
  startPoint String
  endPoint   String
  startTime  Int
  endTime    Int
}

enum IceClass {
  NoIceClass
  Ice1
  Ice2
  Ice3
  Arc4
  Arc5
  Arc6
  Arc7
  Arc8
  Arc9
}

model DayIceCohesion {
  id          Int
  date        String
  iceCohesion Int

  @@id([id, date])
}

model EdgeAvailability {
  id             Int
  iceBreakerName String
  isFeasible     Boolean

  @@id([id, iceBreakerName])
}

model Schedule {
  id Int @id @default(autoincrement())

  startTime Int
  endTime   Int
  startLine String
  endLine   String

  tanker        Tanker     @relation(fields: [tankerId], references: [imo], onDelete: Cascade)
  tankerId      Int
  iceBreaker    IceBreaker @relation(fields: [iceBreakerImo], references: [imo], onDelete: Cascade)
  iceBreakerImo Int
}
